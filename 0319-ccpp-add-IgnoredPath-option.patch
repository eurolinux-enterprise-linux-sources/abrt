From 6f688cd7cadd502565ca2125ccd5b8a8a13eacfa Mon Sep 17 00:00:00 2001
From: Matej Habrnal <mhabrnal@redhat.com>
Date: Thu, 19 Nov 2015 15:04:38 +0100
Subject: [PATCH] ccpp: add IgnoredPath option

ABRT will ignore crashes in executables for which absolute path matches one of
specified patterns.

Related to rhbz#1208713

Signed-off-by: Matej Habrnal <mhabrnal@redhat.com>
---
 src/hooks/CCpp.conf        |    5 ++++
 src/hooks/abrt-hook-ccpp.c |   49 +++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 53 insertions(+), 1 deletions(-)

diff --git a/src/hooks/CCpp.conf b/src/hooks/CCpp.conf
index f9bdd70..2c7944c 100644
--- a/src/hooks/CCpp.conf
+++ b/src/hooks/CCpp.conf
@@ -19,3 +19,8 @@ SaveBinaryImage = no
 # Specify where you want to store debuginfos (default: /var/cache/abrt-di)
 #
 #DebuginfoLocation = /var/cache/abrt-di
+
+# ABRT will ignore crashes in executables whose absolute path matches one of
+# specified patterns.
+#
+#IgnoredPaths =
diff --git a/src/hooks/abrt-hook-ccpp.c b/src/hooks/abrt-hook-ccpp.c
index ee8bdb9..896ad97 100644
--- a/src/hooks/abrt-hook-ccpp.c
+++ b/src/hooks/abrt-hook-ccpp.c
@@ -19,6 +19,7 @@
     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
 #include <syslog.h>
+#include <fnmatch.h>
 #include <sys/utsname.h>
 #include "libabrt.h"
 #include <selinux/selinux.h>
@@ -688,6 +689,19 @@ cleanup:
     return socket_inode;
 }
 
+static bool is_path_ignored(const GList *list, const char *path)
+{
+    const GList *li;
+    for (li = list; li != NULL; li = g_list_next(li))
+    {
+        if (fnmatch((char*)li->data, path, /*flags:*/ 0) == 0)
+        {
+            return true;
+        }
+    }
+    return false;
+}
+
 /* Like other glibc functions this one also return 0 on logical true, positive
  * number on logical false and negative number on error. */
 static int process_is_syslog(pid_t pid)
@@ -759,6 +773,26 @@ cleanup:
     return r;
 }
 
+static void error_msg_not_process_crash(const char *pid_str, const char *process_str,
+        long unsigned uid, int signal_no, const char *signame, const char *message, ...)
+{
+    va_list p;
+    va_start(p, message);
+    char *message_full = xvasprintf(message, p);
+    va_end(p);
+
+    if (signame)
+        error_msg("Process %s (%s) of user %lu killed by SIG%s - %s", pid_str,
+                        process_str, uid, signame, message_full);
+    else
+        error_msg("Process %s (%s) of user %lu killed by signal %d - %s", pid_str,
+                        process_str, uid, signal_no, message_full);
+
+    free(message_full);
+
+    return;
+}
+
 int main(int argc, char** argv)
 {
     int err = 1;
@@ -813,6 +847,7 @@ int main(int argc, char** argv)
     /* ... and plugins/CCpp.conf */
     bool setting_MakeCompatCore;
     bool setting_SaveBinaryImage;
+    GList *setting_ignored_paths = NULL;
     {
         map_string_t *settings = new_map_string();
         load_abrt_plugin_conf_file("CCpp.conf", settings);
@@ -824,6 +859,9 @@ int main(int argc, char** argv)
         value = get_map_string_item_or_NULL(settings, "VerboseLog");
         if (value)
             g_verbose = xatoi_positive(value);
+        value = get_map_string_item_or_NULL(settings, "IgnoredPaths");
+        if (value)
+            setting_ignored_paths = parse_list(value);
         free_map_string(settings);
     }
 
@@ -928,6 +966,16 @@ int main(int argc, char** argv)
         default: goto create_user_core; // not a signal we care about
     }
 
+    const char *last_slash = strrchr(executable, '/');
+    if (executable && is_path_ignored(setting_ignored_paths, executable))
+    {
+        error_msg_not_process_crash(pid_str, last_slash+1, (long unsigned)uid, signal_no,
+                signame, "ignoring (listed in 'IgnoredPaths')");
+
+        return 0;
+    }
+
+
     if (!daemon_is_ok())
     {
         /* not an error, exit with exit code 0 */
@@ -962,7 +1010,6 @@ int main(int argc, char** argv)
         return 1;
     }
 
-    const char *last_slash = strrchr(executable, '/');
     if (last_slash && strncmp(++last_slash, "abrt", 4) == 0)
     {
         /* If abrtd/abrt-foo crashes, we don't want to create a _directory_,
-- 
1.7.1

